{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyMXLryLgZ3wNWx0NyMzmS18"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"code","source":["!pip install gymnasium"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PedibcWYOicl","executionInfo":{"status":"ok","timestamp":1686237913278,"user_tz":-330,"elapsed":7216,"user":{"displayName":"Lukmanul Hakeem M","userId":"17183038146671070294"}},"outputId":"c0f5a01c-915a-4b8d-ebfc-7c922a3e1723"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting gymnasium\n","  Downloading gymnasium-0.28.1-py3-none-any.whl (925 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m925.5/925.5 kB\u001b[0m \u001b[31m13.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from gymnasium) (1.22.4)\n","Collecting jax-jumpy>=1.0.0 (from gymnasium)\n","  Downloading jax_jumpy-1.0.0-py3-none-any.whl (20 kB)\n","Requirement already satisfied: cloudpickle>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from gymnasium) (2.2.1)\n","Requirement already satisfied: typing-extensions>=4.3.0 in /usr/local/lib/python3.10/dist-packages (from gymnasium) (4.5.0)\n","Collecting farama-notifications>=0.0.1 (from gymnasium)\n","  Downloading Farama_Notifications-0.0.4-py3-none-any.whl (2.5 kB)\n","Installing collected packages: farama-notifications, jax-jumpy, gymnasium\n","Successfully installed farama-notifications-0.0.4 gymnasium-0.28.1 jax-jumpy-1.0.0\n"]}]},{"cell_type":"code","source":["!pip install gymnasium[mujoco]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n9V1HxJ4O0YU","executionInfo":{"status":"ok","timestamp":1686237945787,"user_tz":-330,"elapsed":4208,"user":{"displayName":"Lukmanul Hakeem M","userId":"17183038146671070294"}},"outputId":"731365ba-43f5-46f5-d399-00085d24dc87"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: gymnasium[mujoco] in /usr/local/lib/python3.10/dist-packages (0.28.1)\n","Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from gymnasium[mujoco]) (1.22.4)\n","Requirement already satisfied: jax-jumpy>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from gymnasium[mujoco]) (1.0.0)\n","Requirement already satisfied: cloudpickle>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from gymnasium[mujoco]) (2.2.1)\n","Requirement already satisfied: typing-extensions>=4.3.0 in /usr/local/lib/python3.10/dist-packages (from gymnasium[mujoco]) (4.5.0)\n","Requirement already satisfied: farama-notifications>=0.0.1 in /usr/local/lib/python3.10/dist-packages (from gymnasium[mujoco]) (0.0.4)\n","Collecting mujoco>=2.3.2 (from gymnasium[mujoco])\n","  Downloading mujoco-2.3.5-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (4.3 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.3/4.3 MB\u001b[0m \u001b[31m57.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: imageio>=2.14.1 in /usr/local/lib/python3.10/dist-packages (from gymnasium[mujoco]) (2.25.1)\n","Requirement already satisfied: pillow>=8.3.2 in /usr/local/lib/python3.10/dist-packages (from imageio>=2.14.1->gymnasium[mujoco]) (8.4.0)\n","Requirement already satisfied: absl-py in /usr/local/lib/python3.10/dist-packages (from mujoco>=2.3.2->gymnasium[mujoco]) (1.4.0)\n","Collecting glfw (from mujoco>=2.3.2->gymnasium[mujoco])\n","  Downloading glfw-2.5.9-py2.py27.py3.py30.py31.py32.py33.py34.py35.py36.py37.py38-none-manylinux2014_x86_64.whl (207 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.8/207.8 kB\u001b[0m \u001b[31m28.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: pyopengl in /usr/local/lib/python3.10/dist-packages (from mujoco>=2.3.2->gymnasium[mujoco]) (3.1.6)\n","Installing collected packages: glfw, mujoco\n","Successfully installed glfw-2.5.9 mujoco-2.3.5\n"]}]},{"cell_type":"code","execution_count":3,"metadata":{"id":"h-XsePm6NkuV","executionInfo":{"status":"ok","timestamp":1686237960794,"user_tz":-330,"elapsed":8979,"user":{"displayName":"Lukmanul Hakeem M","userId":"17183038146671070294"}}},"outputs":[],"source":["import gymnasium as gym\n","import numpy as np\n","import torch\n","from torch import nn\n","from torch.nn import functional\n","import random\n","from collections import deque"]},{"cell_type":"code","source":["'''\n","Adding super(classname, self).__init__() in the __init__ method of a class allows you to invoke the constructor of the superclass. This ensures that the \n","initialization code defined in the superclass is executed before any additional initialization code in the subclass.\n","'''\n","class SoftQLearning(nn.Module):\n","  def __init__(self, observation_dim, action_dim, alpha):\n","    super(SoftQLearning, self).__init__()\n","    self.observation_dim = observation_dim\n","    self.action_dim = action_dim\n","    self.alpha = alpha\n","    self.fc1 = nn.Linear(self.observation_dim, 64)\n","    self.fc2 = nn.Linear(64, 256)\n","    self.fc3 = nn.Linear(256, self.action_dim)\n","    \n","  def forward(self, observation):\n","    x = self.fc1(observation)\n","    x = functional.relu(x)\n","    x = self.fc2(x)\n","    x = functional.relu(x)\n","    x = self.fc3(x)\n","    return x\n","\n","  def act(self, observation):\n","    with torch.no_grad():\n","      q_value = self.forward(observation)\n","      v = self.getV(q_value)\n","      pi_maxent = torch.exp((q_value - v) / self.alpha)\n","      pi_maxent_ = pi_maxent / pi_maxent.sum(dim=-1, keepdim=True)\n","\n","      #if pi_maxent[0][0]==float('nan') or pi_maxent[0][1]==float('nan'):\n","      #  print(q_value)\n","      #  #print('q_value: ', q_value, '\\nv: ', v, '\\npi_maxent: ', pi_maxent)\n","      #  act1 = np.random.uniform(0, 1)\n","      #  act2 = 1 - act1\n","      #  pi_maxent[0][0] = act1\n","      #  pi_maxent[0][1] = act2\n","      #  dist = torch.distributions.Categorical(pi_maxent)\n","      #else:\n","      #  dist = torch.distributions.Categorical(pi_maxent)\n","      dist = torch.distributions.Categorical(pi_maxent_)\n","      action = dist.sample().item()\n","    return q_value, v, pi_maxent, pi_maxent_, dist, action\n","\n","  def getV(self, q_value):\n","    v = self.alpha * torch.log((1 / self.alpha * q_value).exp().sum(dim=-1, keepdim=True))\n","    return v"],"metadata":{"id":"KE8wJuJctzWz","executionInfo":{"status":"ok","timestamp":1686242051952,"user_tz":-330,"elapsed":419,"user":{"displayName":"Lukmanul Hakeem M","userId":"17183038146671070294"}}},"execution_count":36,"outputs":[]},{"cell_type":"code","source":["torch.distributions.Categorical?"],"metadata":{"id":"Ky9r-8LfJdlS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class ReplayMemory(object):\n","  def __init__(self, capacity):\n","    self.capacity = capacity\n","    self.memory = deque(maxlen=self.capacity)\n","  \n","  def store(self, observation, action, reward, next_observation, terminated):\n","    observation = np.expand_dims(observation, 0)\n","    next_observation = np.expand_dims(next_observation, 0)\n","    self.memory.append([observation, action, reward, next_observation, terminated])"],"metadata":{"id":"62DdrB8971Wh","executionInfo":{"status":"ok","timestamp":1686241118979,"user_tz":-330,"elapsed":8,"user":{"displayName":"Lukmanul Hakeem M","userId":"17183038146671070294"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["learning_rate = 1e-4\n","capacity = 50000\n","render = False\n","episode = 100\n","alpha = 4\n","\n","env = gym.make(\"MountainCar-v0\")\n","env = env.unwrapped\n","obs_dim = env.observation_space.shape[0]    # observation size 23\n","act_dim = env.action_space.n    #   action size 7"],"metadata":{"id":"Lj6pR9qgtzUB","executionInfo":{"status":"ok","timestamp":1686242078237,"user_tz":-330,"elapsed":648,"user":{"displayName":"Lukmanul Hakeem M","userId":"17183038146671070294"}}},"execution_count":38,"outputs":[]},{"cell_type":"code","source":["env.observation_space"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ua2OlubEjrRY","executionInfo":{"status":"ok","timestamp":1686242083664,"user_tz":-330,"elapsed":459,"user":{"displayName":"Lukmanul Hakeem M","userId":"17183038146671070294"}},"outputId":"0a95edfd-edee-4f13-9e8c-6670178f967d"},"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Box([-1.2  -0.07], [0.6  0.07], (2,), float32)"]},"metadata":{},"execution_count":39}]},{"cell_type":"code","source":["env.action_space"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"F5cIu7VnHFl_","executionInfo":{"status":"ok","timestamp":1686242089989,"user_tz":-330,"elapsed":471,"user":{"displayName":"Lukmanul Hakeem M","userId":"17183038146671070294"}},"outputId":"021ed85d-0a4d-46e6-8eb5-3bffe81f8fc3"},"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Discrete(3)"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["target_nn = SoftQLearning(obs_dim, act_dim, alpha)\n","eval_nn = SoftQLearning(obs_dim, act_dim, alpha)\n","\n","eval_nn.load_state_dict(target_nn.state_dict())\n","optimizer = torch.optim.Adam(eval_nn.parameters(), lr=learning_rate)"],"metadata":{"id":"wT4aa1e5tzRy","executionInfo":{"status":"ok","timestamp":1686242096607,"user_tz":-330,"elapsed":457,"user":{"displayName":"Lukmanul Hakeem M","userId":"17183038146671070294"}}},"execution_count":41,"outputs":[]},{"cell_type":"code","source":["buffer_mem = ReplayMemory(capacity)\n","loss_fn = nn.MSELoss()\n","count = 0"],"metadata":{"id":"Xs_FhRJe7OIQ","executionInfo":{"status":"ok","timestamp":1686242099678,"user_tz":-330,"elapsed":498,"user":{"displayName":"Lukmanul Hakeem M","userId":"17183038146671070294"}}},"execution_count":42,"outputs":[]},{"cell_type":"code","source":["action[1]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":165},"id":"CiloKPi5psAX","executionInfo":{"status":"error","timestamp":1686241474406,"user_tz":-330,"elapsed":615,"user":{"displayName":"Lukmanul Hakeem M","userId":"17183038146671070294"}},"outputId":"b73f3cdb-4d4f-4d98-82c7-bb6500374edf"},"execution_count":34,"outputs":[{"output_type":"error","ename":"IndexError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-34-f20c406488b6>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0maction\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mIndexError\u001b[0m: index 1 is out of bounds for dimension 0 with size 1"]}]},{"cell_type":"code","source":["weight_reward = None\n","for i in range(episode)[:5]:\n","  obs = env.reset()\n","  total_reward = 0\n","  if render:\n","    env.render()\n","  while True:\n","    q_value, v, pi_maxent, pi_maxent_, dist, action = eval_nn.act(torch.FloatTensor(np.expand_dims(obs[0], 0)))\n","    count += 1\n","    print(q_value, '||', v, '||', pi_maxent, '||', pi_maxent_, '||', dist, '||', action, '\\n---------------------------------------\\n')\n","    #print(action.shape)\n","    count += 1\n","    next_obs, reward, terminated, truncated, info = env.step(action)\n","    buffer_mem.store(obs, action, reward, next_obs, terminated)\n","    total_reward += reward\n","    obs = next_obs    \n","    if terminated:\n","      break\n","    print('\\n---------------------------------------\\n', count, total_reward)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":539},"id":"XZP6_rea8Rhv","executionInfo":{"status":"error","timestamp":1686242113749,"user_tz":-330,"elapsed":935,"user":{"displayName":"Lukmanul Hakeem M","userId":"17183038146671070294"}},"outputId":"4c3ab8cc-ee84-4922-f10c-35a89ba711a9"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[0.0479, 0.0010, 0.0489]]) || tensor([[4.4271]]) || tensor([[0.3346, 0.3307, 0.3347]]) || tensor([[0.3346, 0.3307, 0.3347]]) || Categorical(probs: torch.Size([1, 3])) || 2 \n","---------------------------------------\n","\n","\n","---------------------------------------\n"," 2 -1.0\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/numpy/lib/shape_base.py:591: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  a = asanyarray(a)\n"]},{"output_type":"error","ename":"RuntimeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-43-243146c51fd0>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0menv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrender\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m   \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m     \u001b[0mq_value\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpi_maxent\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpi_maxent_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maction\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0meval_nn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mact\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFloatTensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexpand_dims\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m     \u001b[0mcount\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mq_value\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'||'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'||'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpi_maxent\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'||'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpi_maxent_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'||'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'||'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maction\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'\\n---------------------------------------\\n'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-36-c9ffbc9c3791>\u001b[0m in \u001b[0;36mact\u001b[0;34m(self, observation)\u001b[0m\n\u001b[1;32m     23\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mact\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mobservation\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mno_grad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 25\u001b[0;31m       \u001b[0mq_value\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobservation\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     26\u001b[0m       \u001b[0mv\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetV\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mq_value\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m       \u001b[0mpi_maxent\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mq_value\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0malpha\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-36-c9ffbc9c3791>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, observation)\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mobservation\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m     \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfc1\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobservation\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m     \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunctional\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrelu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfc2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1499\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1500\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1501\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1502\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1503\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/linear.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    112\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    113\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 114\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinear\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mweight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbias\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    115\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    116\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mextra_repr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mRuntimeError\u001b[0m: mat1 and mat2 shapes cannot be multiplied (1x1 and 2x64)"]}]},{"cell_type":"code","source":["env.step?"],"metadata":{"id":"0UneZnbo8Rem"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from torch.distributions import Categorical\n","\n","# Define the action probabilities\n","action_probs = torch.tensor([0.1, 0.2, 0.15, 0.05, 0.25, 0.1, 0.15])\n","\n","# Create a Categorical distribution\n","dist = Categorical(action_probs)\n","\n","# Sample an action\n","action = dist.sample()\n","\n","print(action.item())  # Print the sampled action"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EXru2vYY7OE_","executionInfo":{"status":"ok","timestamp":1684402125011,"user_tz":-330,"elapsed":426,"user":{"displayName":"Lukmanul Hakeem M","userId":"17183038146671070294"}},"outputId":"54c377f7-24a3-40c9-f2cc-8f3f9b8adc16"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n"]}]},{"cell_type":"code","source":["dist"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iA-VCQdKMCf8","executionInfo":{"status":"ok","timestamp":1684402133498,"user_tz":-330,"elapsed":1500,"user":{"displayName":"Lukmanul Hakeem M","userId":"17183038146671070294"}},"outputId":"22b54379-04da-4726-b2e0-74cd7df65305"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Categorical(probs: torch.Size([7]))"]},"metadata":{},"execution_count":31}]},{"cell_type":"code","source":["import torch\n","import torch.distributions as D\n","\n","# Define mean and standard deviation of the distribution\n","mean = torch.tensor([0.0, 0.0])  # Mean of the distribution\n","std_dev = torch.tensor([1.0, 1.0])  # Standard deviation of the distribution\n","\n","# Create a Normal distribution with the specified mean and standard deviation\n","dist = D.Normal(mean, std_dev)\n","\n","# Sample an action from the distribution\n","action = dist.sample()\n","\n","# Print the sampled action\n","print(action)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rky2pVeH7ODD","executionInfo":{"status":"ok","timestamp":1684403410776,"user_tz":-330,"elapsed":1368,"user":{"displayName":"Lukmanul Hakeem M","userId":"17183038146671070294"}},"outputId":"b5100e3a-88c2-4408-d1d4-74b4ec4142a1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([-0.2513, -1.4424])\n"]}]},{"cell_type":"code","source":["dist"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jW1RbLNBRC0M","executionInfo":{"status":"ok","timestamp":1684403457269,"user_tz":-330,"elapsed":589,"user":{"displayName":"Lukmanul Hakeem M","userId":"17183038146671070294"}},"outputId":"4c2c8012-5ae6-4c37-ee19-a7e8ee945a89"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Normal(loc: torch.Size([2]), scale: torch.Size([2]))"]},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":[],"metadata":{"id":"x-9viRD0RCv4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"HBK-kDQ4RCrF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import random\n","from collections import deque\n","#import gym\n","\n","\n","class replay_buffer(object):\n","    def __init__(self, capacity):\n","        self.capacity = capacity\n","        self.memory = deque(maxlen=self.capacity)\n","\n","    def store(self, observation, action, reward, next_observation, done):\n","        observation = np.expand_dims(observation, 0)\n","        next_observation = np.expand_dims(next_observation, 0)\n","        self.memory.append([observation, action, reward, next_observation, done])\n","\n","    def sample(self, batch_size):\n","        batch = random.sample(self.memory, batch_size)\n","        observations, actions, rewards, next_observations, dones = zip(* batch)\n","        return np.concatenate(observations, 0), actions, rewards, np.concatenate(next_observations, 0), dones\n","\n","    def __len__(self):\n","        return len(self.memory)\n","\n","\n","class soft_q_net(nn.Module):\n","    def __init__(self, observation_dim, action_dim, alpha):\n","        super(soft_q_net, self).__init__()\n","        self.observation_dim = observation_dim\n","        self.action_dim = action_dim\n","        self.alpha = alpha\n","        self.fc1 = nn.Linear(self.observation_dim, 64)\n","        self.fc2 = nn.Linear(64, 256)\n","        self.fc3 = nn.Linear(256, self.action_dim)\n","\n","    def forward(self, observation):\n","        x = self.fc1(observation)\n","        x = F.relu(x)\n","        x = self.fc2(x)\n","        x = F.relu(x)\n","        x = self.fc3(x)\n","        return x\n","\n","    def act(self, observation):\n","        with torch.no_grad():\n","            q_value = self.forward(observation)\n","            v = self.getV(q_value)\n","            pi_maxent = torch.exp((q_value - v) / self.alpha)\n","            pi_maxent = pi_maxent / pi_maxent.sum(dim=-1, keepdim=True)\n","\n","            #if pi_maxent[0][0]==float('nan') or pi_maxent[0][1]==float('nan'):\n","            #  print(q_value)\n","            #  #print('q_value: ', q_value, '\\nv: ', v, '\\npi_maxent: ', pi_maxent)\n","            #  act1 = np.random.uniform(0, 1)\n","            #  act2 = 1 - act1\n","            #  pi_maxent[0][0] = act1\n","            #  pi_maxent[0][1] = act2\n","            #  dist = torch.distributions.Categorical(pi_maxent)\n","            #else:\n","            #  dist = torch.distributions.Categorical(pi_maxent)\n","            dist = torch.distributions.Categorical(pi_maxent)\n","            action = dist.sample().item()\n","        return action\n","\n","    def getV(self, q_value):\n","        v = self.alpha * torch.log((1 / self.alpha * q_value).exp().sum(dim=-1, keepdim=True))\n","        return v\n","\n","\n","def train(buffer, target_model, eval_model, gamma, optimizer, batch_size, loss_fn, count, update_freq):\n","    observation, action, reward, next_observation, done = buffer.sample(batch_size)\n","\n","    observation = torch.FloatTensor(observation)\n","    action = torch.LongTensor(action)\n","    reward = torch.FloatTensor(reward)\n","    next_observation = torch.FloatTensor(next_observation)\n","    done = torch.FloatTensor(done)\n","\n","    q_values = eval_model.forward(observation)\n","    next_q_values = target_model.forward(next_observation)\n","    next_v_values = target_model.getV(next_q_values)\n","    q_value = q_values.gather(1, action.unsqueeze(1)).squeeze(1)\n","    expected_q_value = reward + gamma * (1 - done) * next_v_values.squeeze(-1)\n","\n","    #loss = loss_fn(q_value, expected_q_value.detach())\n","    loss = (expected_q_value.detach() - q_value).pow(2)\n","    loss = loss.mean()\n","\n","    optimizer.zero_grad()\n","    loss.backward()\n","    optimizer.step()\n","    if count % update_freq == 0:\n","        target_model.load_state_dict(eval_model.state_dict())\n","\n","\n","if __name__ == '__main__':\n","    gamma = 0.99\n","    learning_rate = 1e-4\n","    batch_size = 32\n","    update_freq = 200\n","    capacity = 50000\n","    render = False\n","    episode = 1000 #100000\n","    alpha = 4\n","\n","    #env = gym.make('CartPole-v0')\n","    env = gym.make('Pusher-v4')\n","    env = env.unwrapped\n","    observation_dim = env.observation_space.shape[0]\n","    action_dim = env.action_space.shape[0]\n","    target_net = soft_q_net(observation_dim, action_dim, alpha)\n","    eval_net = soft_q_net(observation_dim, action_dim, alpha)\n","    eval_net.load_state_dict(target_net.state_dict())\n","    optimizer = torch.optim.Adam(eval_net.parameters(), lr=learning_rate)\n","    buffer = replay_buffer(capacity)\n","    loss_fn = nn.MSELoss()\n","    count = 0\n","\n","    weight_reward = None\n","    for i in range(episode):\n","        obs = env.reset()\n","        reward_total = 0\n","        if render:\n","            env.render()\n","        while True:\n","            action = eval_net.act(torch.FloatTensor(np.expand_dims(obs[0], 0)))\n","            count += 1\n","            next_obs, reward, done, info, _ = env.step(action)\n","            buffer.store(obs, action, reward, next_obs, done)\n","            reward_total += reward\n","            obs = next_obs\n","            if render:\n","                env.render()\n","            if len(buffer.memory) > batch_size:\n","                train(buffer, target_net, eval_net, gamma, optimizer, batch_size, loss_fn, count, update_freq)\n","\n","            if done:\n","                if not weight_reward:\n","                    weight_reward = reward_total\n","                else:\n","                    weight_reward = 0.99 * weight_reward + 0.01 * reward_total\n","                if (i+1) % 10 == 0:\n","                    print('episode: {}\\treward: {}\\tweight_reward: {:.3f}'.format(i+1, reward_total, weight_reward))\n","                break\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":502},"id":"Veqa-zRmN0f0","executionInfo":{"status":"error","timestamp":1684386652102,"user_tz":-330,"elapsed":551,"user":{"displayName":"Lukmanul Hakeem M","userId":"17183038146671070294"}},"outputId":"7ace5aa4-22e6-4f69-d5f4-6a886b56beea"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-ac760ed4d52d>\u001b[0m in \u001b[0;36m<cell line: 99>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    129\u001b[0m             \u001b[0maction\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0meval_net\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mact\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFloatTensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexpand_dims\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    130\u001b[0m             \u001b[0mcount\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 131\u001b[0;31m             \u001b[0mnext_obs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreward\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minfo\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0menv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maction\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    132\u001b[0m             \u001b[0mbuffer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstore\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maction\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreward\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnext_obs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    133\u001b[0m             \u001b[0mreward_total\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mreward\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/gymnasium/envs/mujoco/pusher_v4.py\u001b[0m in \u001b[0;36mstep\u001b[0;34m(self, a)\u001b[0m\n\u001b[1;32m    170\u001b[0m         \u001b[0mreward\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mreward_dist\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m0.1\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mreward_ctrl\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m0.5\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mreward_near\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    171\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 172\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdo_simulation\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mframe_skip\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    173\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrender_mode\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"human\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    174\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrender\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/gymnasium/envs/mujoco/mujoco_env.py\u001b[0m in \u001b[0;36mdo_simulation\u001b[0;34m(self, ctrl, n_frames)\u001b[0m\n\u001b[1;32m    146\u001b[0m         \u001b[0;31m# Check control input is contained in the action space\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    147\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mctrl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maction_space\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 148\u001b[0;31m             raise ValueError(\n\u001b[0m\u001b[1;32m    149\u001b[0m                 \u001b[0;34mf\"Action dimension mismatch. Expected {self.action_space.shape}, found {np.array(ctrl).shape}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    150\u001b[0m             )\n","\u001b[0;31mValueError\u001b[0m: Action dimension mismatch. Expected (7,), found ()"]}]},{"cell_type":"code","source":["obs[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HrwvaKBDOt7s","executionInfo":{"status":"ok","timestamp":1684386631518,"user_tz":-330,"elapsed":427,"user":{"displayName":"Lukmanul Hakeem M","userId":"17183038146671070294"}},"outputId":"0637fa72-e35e-46a9-9c96-4b57f4703f33"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n","        0.        ,  0.        ,  0.00372974,  0.00357577, -0.00301357,\n","       -0.00152082, -0.00374202,  0.00469485,  0.00286596,  0.821     ,\n","       -0.6       ,  0.        ,  0.41284195, -0.33237961, -0.275     ,\n","        0.45      , -0.05      , -0.323     ])"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["action_dim"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tkptD8q1PR_M","executionInfo":{"status":"ok","timestamp":1684386170594,"user_tz":-330,"elapsed":566,"user":{"displayName":"Lukmanul Hakeem M","userId":"17183038146671070294"}},"outputId":"f0b44abd-5477-4fc0-d6ef-178f6da67352"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(7,)"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":[],"metadata":{"id":"XvRae464PUIz"},"execution_count":null,"outputs":[]}]}